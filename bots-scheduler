#!/usr/bin/python3
from tinyscript import *


__author__    = "Alexandre D'Hondt"
__version__   = "1.2.3"
__copyright__ = "A. D'Hondt"
__license__   = "agpl-3.0"
__reference__ = "https://github.com/Nextdoor/ndscheduler"
__source__    = "https://github.com/dhondta/bots-scheduler"
__requires__  = {'tinyscript': "1.28.6"}
__docformat__ = "md"
__doc__ = """
This tool is a launcher for the Nextdoor Scheduler with a set of jobs based on robots made with PyBots
 (https://github.com/dhondta/python-pybots).
Moreover, it provides authentication through the use of an integrated reverse proxy.
"""


BANNER_FONT   = "smkeyboard"
BANNER_STYLE  = {'fgcolor': "lolcat"}
DEFAULT_USERS = ["administrator:change-this"]
LOG_FORMAT    = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
STATIC_PATH   = "static"
VENV_NAME     = ".venv"
VENV_REQS     = ["passlib", "mitmproxy", "pybots>=2.0.12", "ndscheduler==0.3.0"]


def at_exit():
    if "static_path" in globals() and isinstance(static_path, ts.MirrorPath):
        static_path.unmirror()


if __name__ == "__main__":
    sparsers = parser.add_subparsers(dest="command", help="command to be executed")
    # run command arguments
    run = sparsers.add_parser("run", help="run the server")
    # 1. base settings
    base = run.add_argument_group("base options")
    base.add_argument("--debug", action="store_true", help="run the server in debug mode")
    base.add_argument("-c", "--no-venv-cache", action="store_true", help="force no_cache=False while setting up the "
                                                                         "virtual environment")
    base.add_argument("-j", "--jobs", action="append", default=["jobs"], help="folder with jobs to be imported")
    base.add_argument("-d", "--data-dir", default="data", help="folder with the data files to be used")
    base.add_argument("-l", "--local", action="store_true", help="force running the server locally")
    base.add_argument("-p", "--port", type=ts.port_number, default=8888, help="server's port number",
                      note="this will be the listening port of the proxy, this of the scheduler will be port+1")
    # 2. notification settings
    notify = run.add_argument_group("notification options")
    notify.add_argument("--smtp-config", default="conf/smtp.ini", type=ts.ini_config,
                        help="SMTP INI configuration file")
    notify.add_argument("--smtp-profile", nargs="*", help="SMTP profile to be selected from the configuration file")
    # 3. database settings
    db = run.add_argument_group("database options")
    db.add_argument("--db-config", default="conf/db.ini", type=ts.ini_config, help="database INI configuration file")
    db.add_argument("--db-profile", default="sqlite", help="DB profile to be selected from the configuration file")
    db.add_argument("--executions-table", default="scheduler_executions", help="executions table name")
    db.add_argument("--jobs-table", default="scheduler_jobs", help="jobs table name")
    db.add_argument("--files-table", default="scheduler_files", help="data files table name")
    db.add_argument("--logs-table", default="scheduler_jobauditlogs", help="logs table name")
    # 4. APScheduler settings
    aps = run.add_argument_group("APScheduler options")
    aps.add_argument("--job-coalesce", dest="job_coal", action="store_false",
                     help="Coalesce missed executions of a job")
    aps.add_argument("--job-max-instances", dest="job_max", type=ts.pos_int, default=3,
                     help="Maximum number of concurrently executing instances of a job")
    aps.add_argument("--job-misfire", dest="job_misfire", default=3600, help="Job misfire grace time in seconds")
    aps.add_argument("--threadpool-size", dest="tp_size", type=ts.pos_int, default=2, help="Threadpool size")
    aps.add_argument("--timezone", default="UTC", help="server's timezone")
    # 5. Tornado settings
    tornado = run.add_argument_group("Tornado options")
    tornado.add_argument("--max-workers", dest="tworkers", type=ts.pos_int, default=8, help="Maximum number of workers")
    # 6. proxy settings
    proxy = run.add_argument_group("Mitmproxy options")
    proxy.add_argument("--certificate", type=ts.file_exists, help="TLS private certificate file",
                       note="if None, the default certificate of mitmproxy is used")
    proxy.add_argument("--htpasswd", type=ts.file_exists, help="authentication file",
                       note="if None, .htpasswd is automatically created with the DEFAULT_USERS")
    # maintenance commands' arguments
    clean_cmd = sparsers.add_parser("clean", help="clean server artifacts")
    clean = clean_cmd.add_argument_group("clean options")
    clean.add_argument("-d", "--data-dir", default="data", help="folder with the data files to be used")
    clean.add_argument("--db-config", default="conf/db.ini", type=ts.ini_config, help="DB INI configuration file")
    clean.add_argument("--db-profile", default="sqlite", help="DB profile to be selected from the configuration file")
    reset_cmd = sparsers.add_parser("reset", help="clean server artifacts and reset server")
    reset = reset_cmd.add_argument_group("reset options")
    reset.add_argument("-d", "--data-dir", default="data", help="folder with the data files to be used")
    reset.add_argument("--db-config", default="conf/db.ini", type=ts.ini_config, help="DB INI configuration file")
    reset.add_argument("--db-profile", default="sqlite", help="DB profile to be selected from the configuration file")
    # initialization and logging configuration
    initialize(add_version=True, ext_logging=True, noargs_action="help")
    logging.renameLogger("main", "bots_scheduler")
    logging.setLoggers("apscheduler.executors.default", "core.base", "mitmproxy.reverse.proxy",
                       "ndscheduler.core.scheduler_manager", "ndscheduler.core.scheduler.base", "ndscheduler.job",
                       "ndscheduler.server.server", "numexpr.utils", "tornado.access", "tornado.application")
    # complete args namespace with additional settings from the constants above
    args.default_users = DEFAULT_USERS
    args.static_path   = STATIC_PATH
    c = configparser.ConfigParser()
    c.read(args.db_config)
    p = args.db_profile
    if p in ["mysql", "postgresql", "sqlite"]:
        args.dbms = p
    else:
        try:
            args.dbms = c.get(p, "dbms")
        except configparser.Error:
            logger.critical("Bad DB profile ; should have 'dbms' defined")
    # handle the selected command
    if args.command == "run":
        logger.info("Setting up the virtual environment...")
        os.environ['NDSCHEDULER_SETTINGS_MODULE'] = "ndscheduler.default_settings"
        with VirtualEnv(".venv", VENV_REQS, no_cache=args.no_venv_cache, verbose=args.verbose) as venv:
            from core import base, run_proxy, run_server
            from ndscheduler import settings
            base._load_mail_config(args.smtp_config, *(args.smtp_profile or []))
            sys.modules['botscheduler'] = base
            logger.info("Starting the authentication proxy...")
            if not args.local:
                p = run_proxy(args)
            logger.info("Starting the scheduling server...")
            static_path = ts.MirrorPath(args.static_path, settings.STATIC_DIR_PATH)
            run_server(args)
            if not args.local:
                p.join(5)
    elif args.command in ["clean", "reset"]:
        # remove the SQLite datastore DB if relevant
        if args.dbms == "sqlite":
            f = c.get(args.db_profile, "file_path")
            if os.path.isfile(f):
                os.remove(f)
        # clear the data directory
        shutil.rmtree(args.data_dir)
        os.mkdir(args.data_dir)
        if args.command == "reset":
            # remove the virtual environment
            if os.path.isdir(VENV_NAME):
                shutil.rmtree(VENV_NAME)
            # prepare configuration files from templates, if any
            for conf in os.listdir("conf"):
                conf = os.path.join("conf", conf)
                if conf.endswith(".template"):
                    os.rename(conf, conf[:-9])
        logger.info("DONE")

